paths:
  /products:
    post:
      tags:
        - productos
      summary: creacion de un nuevo producto en la base de datos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrUpdateProduct'
        required: true
      responses:
        '200':
          description: se registro el producto correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/Product'
        '500':
          description: error del servidor
    get:
      summary: obtiene todos los productos
      tags:
        - productos
      responses:
        '200':
          description: se obtuvieron los productos
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/GetAllProducts'
        '500':
          description: error del servidor.
  /products/{id}:
    get:
      summary: obtiene el producto buscado con su id
      tags: 
        - productos
      parameters:
        - in: path
          name: id
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        '200':
          description: producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/Product'
        '404':
          description: producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/ErrorGetById'
        '500':
          description: error del servidor.
    put:
      tags:
        - productos
      summary: actualizacion de productos con el id
      parameters:
        - in: path
          name: id
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        '200':
          description: actualizacion del producto
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/Product'
        '404':
          description: producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/ErrorGetById'
        '500':
          description: error del servidors
    delete:
      tags:
        - productos
      summary: borra el producto
      parameters:
        - in: path
          name: id
          required: true
          description: id del producto
          schema:
          type: string
      responses:
        '200':
          description: producto borrado con exito
        '404':
          description: producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schema/products/ErrorGetById'
        '500':
          description: error del servidors
  /cart:
    post:
      tags:
        - carrito
      summary: creacion del carrito
      responses:
        '200':
          description: carrito creado
          content:
            application/json:
              $ref: '#/components/schema/carts/Cart'
        '500':
          description: error de servidor
  /cart/{id}:
    get:
      tags:
        - carrito
      summary: obtiene el carrito del id correspondiente
      parameters:
       - in: path
         name: id
         required: true
         description: id del carro
         schema:
         type: string
      responses:
        '200':
          description: carrito encontrado
          content: 
            application/json:
              $ref: '#/components/schema/carts/Cart'
        '404':
          description: carrito no encontrado
        '500':
          description: error de servidor     
    put:
      tags:
        - carrito
      summary: actualiza el carrito 
      parameters:
        - in: path
          name: id
          required: true
          description: id del producto
          schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            $ref: '#/components/parameters/schemas/Cart'
  /cart/{cid}/product/{pid}:
    post:    
      tags:
        - carrito
      summary: agrega productos al carrito
      security:
        - passport: []
      parameters:
        - in: path
          name: cid
          required: true
          description: id del carrito
          schema:
            type: string
        - in: path
          name: pid
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        '200':
          description: producto sumado alcarrito
          content: 
            application/json:
              $ref: '#/components/schema/carts/Cart'  
        '500':
          description: error del servidor
    put: 
      tags:
        - carrito
      summary: actualiza productos al carrito
      security:
        - passport: []
      parameters:
        - in: path
          name: cid
          required: true
          description: id del carrito
          schema:
            type: string
        - in: path
          name: pid
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        '200':
          description: producto actualizado
          content: 
            application/json:
              $ref: '#/components/schema/carts/Cart'  
        '500':
          description: error del servidor    
    delete:
      tags:
        - carrito
      summary: elimina productos al carrito
      security:
        - passport: []
      parameters:
        - in: path
          name: cid
          required: true
          description: id del carrito
          schema:
            type: string
        - in: path
          name: pid
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        '200':
          description: producto eliminado
          content: 
            application/json:
              $ref: '#/components/schema/carts/Cart'  
        '500':
          description: error del servidor   
  /users:   
    get:
      tags:
        - users
      summary: "obtiene todos los usuarios"
      responses: 
        '200':
          description: dto devuelve los usuarios sin datos sensibles
        '500':
          description: error del servidor  
  /users/register:
    post:
      tags:
        - users
      summary: registra un usuario         
      requestBody:
        content:
          application/json:
            $ref: '#/components/schemas/UserReg'
        required: true
      responses:
        '200':
          description: se registro el usuario correctamente
          content:
            application/json:
              schema: 
                $ref: '#/components/schema/users/post'
        '401': 
          description: unautoriced, por lo general se refiere a que el usuario ya existe
        '500':
          description: error de servidor
  /users/login:
    post:
      tags:
        - users
      summary: logea un usuario
      requestBody:
        content:
          application/json:
            $ref: '#/components/schemas/Userlog'
        required: true
      responses:
        '200':
          description: se logeo al usuario
          content:
            application/json:
              schema: 
                $ref: '#/components/schema/users/postLog'
        '500':
          description: error del servidor  
  /users/logout:
    post:
      tags:
        - users
      summary: desloguea
      responses:
        '200':
          description: usuario deslogueado
          content: 
            application/json:
              schema:
                $ref: '#/components/schema/users/logout'
  /users/register-github:
    get:
      tags:
        - users
      summary: registra un github
  /users/profile-github:
    get:
      tags:
        - users
      summary: loguea con github?
  /users/premium/:id:
    patch:
      tags:
        - users
      summary: cambia a premium el usuario si cuenta con los documentos cargados
      security:
        - passport: []  
      parameters:
        - in: path
          name: id
          required: true
          description: id del usuario
          schema:
            type: string
      responses:
        '200':
          content: 
            application/json:
              schema:
                $ref: '#/components/schema/users/premium'
          description: el usuario cambio a premium o a user
        '403':
          description: la documentacion esta incompleta
        '500':
          description: error del servidor
  users/:id/documents:
    post:  
      tags:
        - users
      summary: sube un archivo del usuario, detecta y ordena en carpetas segun el tipo
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          required: true
          description: id del usuario
          schema:
           type: string
        - in: formData
          name: type
          type: string
          required: true
          description: Tipo de archivo (required)
        - in: formData
          name: document_type
          type: string
          required: false  
          description: Tipo de documento (optional)
      responses:
        '200':
          description: Solicitud procesada con Ã©xito 
          content: 
            application/json:
              schema: 
                $ref: '#/components/schema/users/document'
              examples:
                success:
                 $ref: '#/components/examples/users/document/success' 
        '400':
          description: error al subir el archivo
          content: 
            application/json:
              schema: 
                $ref: '#/components/schema/users/document'
              examples:
                success:
                 $ref: '#/components/examples/users/document/error' 
        '500':
          description: error del servidor
  /users/:
    delete:
      tags:
        - users
      summary: borra a todos los usuarios inactivos desde hace 2 dias.
      responses:
        '200':
          description: se borraron los usuarios con exito
                      
                
      

components:
  securityScheme:
    passport:
      type: apiKey
      name: authorization
      in: header


